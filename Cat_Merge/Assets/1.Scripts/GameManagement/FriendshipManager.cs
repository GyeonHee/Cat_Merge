using UnityEngine;
using TMPro;
using UnityEngine.UI;
using System.Collections.Generic;
using System.Linq;


[System.Serializable]
public class CatFriendship
{
    public int catGrade;           // 고양이 등급
    public int currentExp;         // 현재 경험치
    public bool[] isLevelUnlocked; // 각 레벨 해금 여부
    public bool[] rewardsClaimed;  // 각 레벨별 보상 수령 여부

    public CatFriendship(int grade)
    {
        catGrade = grade;
        currentExp = 0;
        isLevelUnlocked = new bool[5];
        rewardsClaimed = new bool[5];
    }
}

public class FriendshipManager : MonoBehaviour
{
    // 먹이 소환시 경험치 1 획득
    // 동일등급 머지시 경험치 2 획득
    // 구매 소환시 경험치 1 획득
    // 하위등급이 머지가 되어 소환될 때 상위등급 경험치 1획득

    public static FriendshipManager Instance { get; private set; }

    // 레벨별 보상 금액 설정
    private int[] rewardAmounts = new int[] { 5, 10, 15, 20, 25 };
    
    [SerializeField] public TextMeshProUGUI expRequirementText;
    [SerializeField] public Slider expGauge;

    // ======================================================================================================================

    // 각 고양이별 호감도 정보 저장
    private Dictionary<int, CatFriendship> catFriendships = new Dictionary<int, CatFriendship>();

    // 레벨별 필요 경험치 데이터
    private Dictionary<int, List<(int exp, int reward)>> levelByGrade = new Dictionary<int, List<(int exp, int reward)>>();

    // ======================================================================================================================

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }

        InitializeCatFriendships();
    }

    private void Start()
    {
        //// 레벨별 필요 경험치 데이터 초기화
        //levelRequirements = FriendshipDataLoader.Instance.GetDataByGrade(1)
        //    .Select(data => (data.exp, data.reward))
        //    .ToList();

        // 모든 등급의 경험치 데이터를 초기화
        for (int i = 0; i < 3; i++)
        {
            levelByGrade[i] = FriendshipDataLoader.Instance.GetDataByGrade(i + 1)
                .Select(data => (data.exp, data.reward))
                .ToList();        
        }

        expGauge.value = 0f;


        saveNextExpLv1 = levelByGrade[0][0].exp;
        saveNextExpLv2 = levelByGrade[1][0].exp;
        saveNextExpLv3 = levelByGrade[2][0].exp;
    }


    private void Update()
    {
        //// 각 고양이의 최대 경험치 제한 체크
        //foreach (var friendship in catFriendships.Values)
        //{
        //    if (friendship.currentExp >= levelRequirements[4].exp)
        //    {
        //        friendship.currentExp = levelRequirements[4].exp;
        //        UpdateFriendshipUI(friendship.catGrade);
        //    }
        //}

        // 각 고양이의 최대 경험치 제한 체크
        foreach (var friendship in catFriendships.Values)
        {
            int grade = friendship.catGrade;
            if (levelByGrade.ContainsKey(grade) && friendship.currentExp >= levelByGrade[grade - 1][4].exp)
            {
                friendship.currentExp = levelByGrade[grade - 1][4].exp;
                UpdateFriendshipUI(grade);
            }
        }
    }


    private void InitializeCatFriendships()
    {
        // Initialize all cat friendships
        for (int i = 1; i <= 60; i++)
        {
            catFriendships[i] = new CatFriendship(i);
        }
    }

    // 경험치 추가 및 레벨 체크
    public void AddExperience(int catGrade, int expAmount)
    {
        if (!catFriendships.ContainsKey(catGrade)) return;

        var friendship = catFriendships[catGrade];
        friendship.currentExp += expAmount;

        // 최대 경험치 제한
        if (friendship.currentExp >= levelByGrade[catGrade - 1][4].exp)
        {
            friendship.currentExp = levelByGrade[catGrade - 1][4].exp;
        }

        // 각 레벨 해금 상태 체크
        for (int i = 0; i < 5; i++)
        {
            if (friendship.currentExp >= levelByGrade[catGrade - 1][i].exp)
            {
                friendship.isLevelUnlocked[i] = true;
            }
        }

        UpdateFriendshipUI(catGrade);
    }

    
    int saveNextExpLv1;
    int saveNextExpLv2;
    int saveNextExpLv3;
    // UI 업데이트
    public void UpdateFriendshipUI(int catGrade)
    {
        if (!catFriendships.ContainsKey(catGrade)) return;

        var friendship = catFriendships[catGrade];

        // 현재 레벨과 다음 레벨 경험치 계산
        int nextLevelExp = levelByGrade[catGrade - 1][0].exp;

        // 현재 경험치가 필요 경험치 이상일 때
        for (int i = 4; i >= 0; i--)
        {
            if (friendship.currentExp >= levelByGrade[catGrade - 1][i].exp)
            {
                if (DictionaryManager.Instance.buttonClick)
                {
                    friendship.currentExp -= nextLevelExp;
                    nextLevelExp = i < 4 ? levelByGrade[catGrade - 1][i + 1].exp : levelByGrade[catGrade - 1][i].exp;

                    switch (catGrade)
                    {
                        case 1:
                            saveNextExpLv1 = nextLevelExp;
                            expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv1}";
                            break;
                        case 2:
                            saveNextExpLv2 = nextLevelExp;
                            expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv2}";
                            break;
                        case 3:
                            saveNextExpLv3 = nextLevelExp;
                            expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv3}";
                            break;
                    }

                    //saveNextExpLv1 = nextLevelExp;
                    //expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv1}";
                    DictionaryManager.Instance.buttonClick = false;
                    break;
                }
            }
        }

        // UI 텍스트 업데이트
        if (expRequirementText != null)
        {
            switch(catGrade)
            {
                case 1:
                    expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv1}";
                    break;
                case 2:
                    expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv2}";
                    break;
                case 3:
                    expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv3}";
                    break;

            }
            //expRequirementText.text = $"{friendship.currentExp} / {saveNextExpLv1}";
        }

        // 게이지 업데이트
        if (expGauge != null)
        {
            float progress = 0f;
            switch (catGrade)
            {
                case 1:
                    progress = (float)friendship.currentExp / saveNextExpLv1;
                    break;
                case 2:
                    progress = (float)friendship.currentExp / saveNextExpLv2;
                    break;
                case 3:
                    progress = (float)friendship.currentExp / saveNextExpLv3;
                    break;

            }

            //float progress = (float)friendship.currentExp / saveNextExpLv1;
            expGauge.value = Mathf.Clamp01(progress);
        }

        // 버튼 상태 업데이트
        DictionaryManager.Instance.UpdateFriendshipButtonStates(catGrade);
    }


    // 특정 고양이의 우정도 정보 가져오기
    public (int currentExp, bool[] isUnlocked, bool[] isClaimed) GetFriendshipInfo(int catGrade)
    {
        if (!catFriendships.ContainsKey(catGrade))
            return (0, new bool[5], new bool[5]);

        var friendship = catFriendships[catGrade];
        return (friendship.currentExp, friendship.isLevelUnlocked, friendship.rewardsClaimed);
    }

    // 보상 수령 가능 여부 확인
    public bool CanClaimLevelReward(int catGrade, int level)
    {
        if (!catFriendships.ContainsKey(catGrade)) return false;

        var friendship = catFriendships[catGrade];
        return friendship.isLevelUnlocked[level] && !friendship.rewardsClaimed[level];
    }

    // 보상 금액 가져오기
    public int GetRewardAmount(int level)
    {
        if (level >= 0 && level < rewardAmounts.Length)
        {
            return rewardAmounts[level];
        }
        return 0;
    }

    // 보상 수령
    public void ClaimReward(int catGrade, int level)
    {
        if (!CanClaimLevelReward(catGrade, level)) return;

        var friendship = catFriendships[catGrade];
        friendship.rewardsClaimed[level] = true;
        GameManager.Instance.Cash += GetRewardAmount(level);

        UpdateFriendshipUI(catGrade);
    }

}
